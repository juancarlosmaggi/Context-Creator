# File: main.py
from fastapi import FastAPI, Request, Form
from fastapi.responses import HTMLResponse, FileResponse
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
import os
from pathlib import Path
from datetime import datetime

app = FastAPI()
current_dir = Path(__file__).parent
static_dir = current_dir / "static"
static_dir.mkdir(exist_ok=True)  # Create static directory if it doesn't exist
app.mount("/static", StaticFiles(directory=str(static_dir)), name="static")
templates = Jinja2Templates(directory=str(current_dir / "templates"))

def get_project_structure(base_path: Path):
    structure = []
    for entry in base_path.iterdir():
        if entry.is_dir():
            structure.append({"path": str(entry.relative_to(base_path)), "type": "directory"})
        else:
            structure.append({"path": str(entry.relative_to(base_path)), "type": "file"})
    return structure

def process_files(selected_paths: list, base_path: Path):
    output = []
    for path in selected_paths:
        full_path = base_path / path
        if full_path.is_dir():
            for file_path in full_path.rglob("*"):
                if file_path.is_file():
                    process_file(file_path, base_path, output)
        else:
            process_file(full_path, base_path, output)
    return "\n".join(output)

def process_file(file_path: Path, base_path: Path, output: list):
    try:
        with open(file_path, "r", encoding="utf-8") as f:
            content = f.read()
            relative_path = file_path.relative_to(base_path)
            output.append(f"# File: {relative_path}\n{content}\n\n")
    except UnicodeDecodeError:
        pass

@app.get("/", response_class=HTMLResponse)
async def index(request: Request):
    base_path = Path.cwd()
    structure = get_project_structure(base_path)
    return templates.TemplateResponse("index.html", {"request": request, "structure": structure})

@app.post("/process/")
async def process_files_route(selected_paths: list = Form(...)):
    base_path = Path.cwd()
    processed_content = process_files(selected_paths, base_path)
    
    timestamp = datetime.now().strftime("%Y%m%d%H%M%S")
    output_filename = f"llm_input_{timestamp}.txt"
    output_path = base_path / "outputs" / output_filename
    
    output_path.parent.mkdir(exist_ok=True)
    with open(output_path, "w", encoding="utf-8") as f:
        f.write(processed_content)
    
    return FileResponse(output_path, filename=output_filename)


